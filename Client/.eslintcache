[{"/Users/jacobsonpro/GitHub/ReBuy/ReBuySite/Client/src/Components/Pages/Home/Create.js":"1","/Users/jacobsonpro/GitHub/ReBuy/ReBuySite/Client/src/Components/Pages/Home/Products.js":"2","/Users/jacobsonpro/GitHub/ReBuy/ReBuySite/Client/src/Components/SSO/SignUp.js":"3"},{"size":6607,"mtime":1618308919322,"results":"4","hashOfConfig":"5"},{"size":9740,"mtime":1618308680876,"results":"6","hashOfConfig":"5"},{"size":3022,"mtime":1618309451649,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"kn6s5o",{"filePath":"10","messages":"11","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jacobsonpro/GitHub/ReBuy/ReBuySite/Client/src/Components/Pages/Home/Create.js",["16"],"/Users/jacobsonpro/GitHub/ReBuy/ReBuySite/Client/src/Components/Pages/Home/Products.js",["17"],"import React, { Component, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport api from \"../../../API/API\";\nimport styled from \"styled-components\";\nimport \"react-table/index\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Search from \"./Search\";\nimport Sort from \"./Sort\";\nimport { Link } from \"react-router-dom\";\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\nimport {\n  Card,\n  CardContent,\n  CardActionArea,\n  CardActions,\n  CardMedia,\n  Typography,\n  Button,\n  GridList,\n  GridListTile,\n  GridListTileBar,\n} from \"@material-ui/core\";\nimport Carousel from \"react-bootstrap/Carousel\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport PopUp from \"../../Utils/PopUp\";\n\nconst Wrapper = styled.div`\n  padding: 0 40px 40px 40px;\n`;\n\nconst Update = styled.div`\n  color: #ef9b0f;\n  cursor: pointer;\n`;\n\nconst Delete = styled.div`\n  color: #ff0000;\n  cursor: pointer;\n`;\n\nfunction UpdateProduct({ id }) {\n  const history = useHistory();\n\n  const updateUser = (event) => {\n    event.preventDefault();\n    history.push(`/Update/${id}`);\n  };\n  return <Update onClick={updateUser}>Update</Update>;\n}\n\nclass DeleteProduct extends Component {\n  constructor() {\n    super();\n  }\n  deleteUser = (event) => {\n    event.preventDefault();\n\n    if (\n      window.confirm(\n        `Do tou want to delete the product ${this.props.id} permanently?`\n      )\n    ) {\n      api\n        .deleteProductById(this.props.id)\n        .then((res) => {\n          this.props.deleteHandler(res.data);\n        })\n        .catch((err) => console.log(err));\n      console.log(\"after res\");\n      // window.location.reload();\n    }\n  };\n\n  render() {\n    return <Delete onClick={this.deleteUser}>DELETE</Delete>;\n  }\n}\n\nexport default class ProductsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [],\n      images: [],\n      columns: [],\n      isLoading: this.props.loading,\n      imagePath: \"\",\n    };\n  }\n\n  componentDidMount = async () => {\n    this.setState({ isLoading: true });\n    try {\n      await api.getAllProducts().then((product) => {\n        this.setState({\n          products: product.data.data,\n        });\n        this.props.setLoading(false);\n      });\n      await api.getAllImages().then((image) => {\n        this.setState({\n          images: image.data.data,\n        });\n        this.props.setLoading(false);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  searchHandler = (products) => {\n    this.setState({\n      products,\n    });\n  };\n  deleteHandler = (productId) => {\n    this.setState({\n      products: this.state.products.filter((product) => {\n        return product._id !== productId.data._id;\n      }),\n    });\n  };\n  render() {\n    const { products, images, isLoading } = this.state;\n    console.log(images);\n\n    return (\n      <Wrapper>\n        <h1>Market</h1>\n        <Search searchHandler={this.searchHandler} />\n        <Sort searchHandler={this.searchHandler} />\n        <CardLine\n          products={products}\n          images={images}\n          deleteHandler={this.deleteHandler}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    // width: \"100%\",\n    // height: \"100%\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    direction: \"ltr\",\n  },\n  gridList: {\n    // height: \"100%\",\n    // width: \"100%\",\n    flexWrap: \"nowrap\",\n    // display: \"flex\",\n    // flexDirection: \"column\",\n    // alignItems: \"center\",\n    transform: \"translateZ(0)\",\n  },\n  tile: {\n    height: \"100%\",\n  },\n  title: {\n    color: theme.palette.primary.light,\n  },\n  titleBar: {\n    background:\n      \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\",\n  },\n}));\n\nfunction CardLine({ products, images, deleteHandler }) {\n  const history = useHistory();\n  const cardOnClickHandler = (e, id) => {\n    // history.push(`/product/${id}`);\n  };\n  const classes = useStyles();\n  const [isModelOpen, setIsModelOpen] = useState(false);\n\n  function productImages(product) {\n    let arr = [];\n    product[\"images\"].map((src) => {\n      let temp = images.find((element) => element[\"_id\"] === src);\n      return temp && arr.push(temp);\n    });\n    return arr;\n  }\n  return (\n    <div className={classes.root}>\n      <GridList className={classes.gridList} cols={2}>\n        {products &&\n          products.map((product, i) => (\n            <GridListTile\n              style={{ height: \"100%\", maxWidth: 300, minWidth: 100 }}\n              key={product[\"name\"]}\n            >\n              <PopUp\n                product={product}\n                isModelOpen={isModelOpen}\n                setIsModelOpen={setIsModelOpen}\n              />\n              <Card\n                style={{\n                  margin: \"1rem\",\n                  maxWidth: 300,\n                  minWidth: 100,\n                  height: \"fit-content\",\n                  border: \"1px solid #ececec\",\n                  borderRadius: \"15px\",\n                }}\n              >\n                {product[\"images\"] && images[0] && (\n                  // productImages(product).map((img) => {\n                  //   return (\n                  //     <CardMedia\n                  //       image={`data:${images[0][\"contentType\"]};base64,${images[0][\"imageBase64\"]}`}\n                  //       // image={`data:${img[\"contentType\"]};base64,${img[\"imageBase64\"]}`}\n                  //       title=\"Contemplative Reptile\"\n                  //       style={{ height: 140 }}\n                  //     />\n                  //   );\n                  // })\n                  // <CardMedia\n                  //   image={`data:${images[i % 5][\"contentType\"]};base64,${\n                  //     images[i % 5][\"imageBase64\"]\n                  //   }`}\n                  //   // image={`data:${img[\"contentType\"]};base64,${img[\"imageBase64\"]}`}\n                  //   title=\"Contemplative Reptile\"\n                  //   style={{ height: 140 }}\n                  // />\n                  <SingleLineGridList images={images} />\n                  // <SingleLineGridList images={productImages(product)} />\n                )}{\" \"}\n                <CardActionArea\n                  // onClick={(e) => cardOnClickHandler(e, product[\"_id\"])}\n                  onClick={() => setIsModelOpen(true)}\n                >\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      <p>{product[\"name\"]}</p>\n                      <p>{product[\"price\"]}</p>\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      {/* <p>Seller:{product[\"ownerId\"]}</p> */}\n                      <p>Description:{product[\"description\"]}</p>\n                      <p>Condition:{product[\"condition\"]}</p>\n                      <p>Address:{product[\"address\"]}</p>\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions style={{ justifyContent: \"center\" }}>\n                  <Button size=\"small\" color=\"primary\">\n                    <DeleteProduct\n                      id={product[\"_id\"]}\n                      deleteHandler={deleteHandler}\n                    />\n                  </Button>\n                  <Button size=\"small\" color=\"primary\">\n                    <StarBorderIcon />\n                  </Button>\n                  <Button size=\"small\" color=\"primary\">\n                    <UpdateProduct id={product[\"_id\"]} />\n                  </Button>\n                </CardActions>\n              </Card>\n            </GridListTile>\n          ))}\n      </GridList>\n    </div>\n  );\n}\n\nfunction SingleLineGridList({ images }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Carousel>\n        {images.map((Image) => (\n          <Carousel.Item>\n            <img\n              className=\"d-block w-100\"\n              src={`data:${Image[\"contentType\"]};base64,${Image[\"imageBase64\"]}`}\n              alt={Image[\"fileName\"]}\n            />\n          </Carousel.Item>\n        ))}\n      </Carousel>\n    </div>\n  );\n}\n\n// function SingleLineGridList({ images }) {\n//   const classes = useStyles();\n\n//   return (\n//     <div className={classes.root}>\n//       {/* <GridList className={classes.gridList} cols={1}> */}\n//       <Carousel>\n//         {images.map((Image) => (\n//           <Carousel.Item>\n//             <img\n//               className=\"d-block w-100\"\n//               src={`data:${Image[\"contentType\"]};base64,${Image[\"imageBase64\"]}`}\n//               alt={Image[\"fileName\"]}\n//             />\n//           </Carousel.Item>\n\n//           // <GridListTile key={Image[\"_id\"].img}>\n//           //   <img\n//           //     src={`data:${Image[\"contentType\"]};base64,${Image[\"imageBase64\"]}`}\n//           //     alt={Image[\"fileName\"]}\n//           //   />\n//           //   {/* <GridListTileBar\n//           //     title={Image[\"fileName\"]}\n//           //     classes={{\n//           //       root: classes.titleBar,\n//           //       title: classes.title,\n//           //     }}\n//           //     actionIcon={\n//           //       <IconButton aria-label={`star ${Image[\"fileName\"]}`}>\n//           //         <StarBorderIcon className={classes.title} />\n//           //       </IconButton>\n//           //     }\n//           //   /> */}\n//           // </GridListTile>\n//         ))}\n//       </Carousel>\n//       {/* </GridList> */}\n//     </div>\n//   );\n// }\n",["18","19"],"/Users/jacobsonpro/GitHub/ReBuy/ReBuySite/Client/src/Components/SSO/SignUp.js",["20"],{"ruleId":"21","severity":1,"message":"22","line":159,"column":7,"nodeType":"23","messageId":"24","endLine":159,"endColumn":13},{"ruleId":null,"fatal":true,"severity":2,"message":"25","line":24,"column":2},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"21","severity":1,"message":"30","line":1,"column":29,"nodeType":"23","messageId":"24","endLine":1,"endColumn":37},"no-unused-vars","'images' is assigned a value but never used.","Identifier","unusedVar","Parsing error: Unexpected token\n\n  22 |   GridListTileBar,\n  23 | } from \"@material-ui/core\";\n> 24 | <<<<<<< HEAD\n     |  ^\n  25 | import Carousel from \"react-bootstrap/Carousel\";\n  26 | import \"bootstrap/dist/css/bootstrap.min.css\";\n  27 | import PopUp from \"../../Utils/PopUp\";","no-native-reassign",["31"],"no-negated-in-lhs",["32"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]