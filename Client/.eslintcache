[{"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\Client\\src\\App.js":"1","C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\Client\\src\\Components\\SSO\\Config.js":"2","C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\Client\\src\\Components\\Pages\\Home\\Groupby.js":"3","C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\Client\\src\\Components\\Pages\\Admin\\Admin.js":"4"},{"size":990,"mtime":1621860168754,"results":"5","hashOfConfig":"6"},{"size":521,"mtime":1621330628710,"results":"7","hashOfConfig":"6"},{"size":2614,"mtime":1621330868579,"results":"8","hashOfConfig":"6"},{"size":4143,"mtime":1622444624534,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ogx5ad",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\Client\\src\\App.js",["19"],"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\Client\\src\\Components\\SSO\\Config.js",[],"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\Client\\src\\Components\\Pages\\Home\\Groupby.js",["20","21","22","23","24","25","26","27","28","29","30"],"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\Client\\src\\Components\\Pages\\Admin\\Admin.js",["31","32"],"import React, { Component } from \"react\";\r\nimport api from \"../../../API/API.js\";\r\nimport _ from \"lodash\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nclass Admin extends Component {\r\n  state = { products: [], users: [], prodByAdress: [], prodByCategory: [] };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      await api.getAllProducts().then((product) => {\r\n        this.setState({\r\n          products: product.data.data,\r\n        });\r\n      });\r\n      this.setState({\r\n        prodByAdress: _.countBy(this.state.products, \"address\"),\r\n        prodByCategory: _.countBy(this.state.products, \"category\"),\r\n      });\r\n      await api.getAllUsers().then((user) => {\r\n        this.setState({\r\n          users: user.data.data,\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { products, users, prodByAdress, prodByCategory } = this.state;\r\n    let address = [];\r\n    let count = [];\r\n    let category = [];\r\n    let countCategory = [];\r\n    _.forEach(prodByAdress, (val, key) => {\r\n      address.push(key);\r\n      count.push(val);\r\n    });\r\n    console.log(prodByCategory, \"category\");\r\n    _.forEach(prodByCategory, (val, key) => {\r\n      category.push(key);\r\n      countCategory.push(val);\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div className='container'>\r\n          <div className='row'>\r\n            <Bar\r\n              data={{\r\n                labels: address,\r\n                datasets: [\r\n                  {\r\n                    label: \"Products per address\",\r\n                    data: count,\r\n                    backgroundColor: [\r\n                      \"rgba(255, 99, 132,0.4)\",\r\n                      \"rgba(54, 162, 235, 0.4)\",\r\n                      \"rgba(255, 206, 86, 0.4)\",\r\n                      \"rgba(75, 192, 192, 0.4)\",\r\n                      \"rgba(153, 102, 255, 0.4)\",\r\n                      \"rgba(255, 159, 64, 0.4)\",\r\n                    ],\r\n                    borderColor: [\r\n                      \"rgba(255, 99, 132,0.4)\",\r\n                      \"rgba(54, 162, 235, 0.4)\",\r\n                      \"rgba(255, 206, 86, 0.4)\",\r\n                      \"rgba(75, 192, 192, 0.4)\",\r\n                      \"rgba(153, 102, 255, 0.4)\",\r\n                      \"rgba(255, 159, 64, 0.4)\",\r\n                    ],\r\n                    borderWidth: 1,\r\n                  },\r\n                ],\r\n              }}\r\n              height={50}\r\n              width={100}\r\n              oprions={{\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  yAxes: {\r\n                    beginAtZero: true,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n            <div></div>\r\n            <Bar\r\n              data={{\r\n                labels: category,\r\n                datasets: [\r\n                  {\r\n                    label: \"Products per Category\",\r\n                    data: countCategory,\r\n                    backgroundColor: [\r\n                      \"rgba(255, 99, 132,0.4)\",\r\n                      \"rgba(54, 162, 235, 0.4)\",\r\n                      \"rgba(255, 206, 86, 0.4)\",\r\n                      \"rgba(75, 192, 192, 0.4)\",\r\n                      \"rgba(153, 102, 255, 0.4)\",\r\n                      \"rgba(255, 159, 64, 0.4)\",\r\n                    ],\r\n                    borderColor: [\r\n                      \"rgba(255, 99, 132,0.4)\",\r\n                      \"rgba(54, 162, 235, 0.4)\",\r\n                      \"rgba(255, 206, 86, 0.4)\",\r\n                      \"rgba(75, 192, 192, 0.4)\",\r\n                      \"rgba(153, 102, 255, 0.4)\",\r\n                      \"rgba(255, 159, 64, 0.4)\",\r\n                    ],\r\n                    borderWidth: 1,\r\n                  },\r\n                ],\r\n              }}\r\n              height={50}\r\n              width={100}\r\n              oprions={{\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  yAxes: {\r\n                    beginAtZero: true,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Admin;\r\n",{"ruleId":"33","severity":1,"message":"34","line":10,"column":7,"nodeType":"35","messageId":"36","endLine":10,"endColumn":13},{"ruleId":"33","severity":1,"message":"37","line":2,"column":16,"nodeType":"35","messageId":"36","endLine":2,"endColumn":22},{"ruleId":"33","severity":1,"message":"38","line":2,"column":24,"nodeType":"35","messageId":"36","endLine":2,"endColumn":27},{"ruleId":"33","severity":1,"message":"39","line":6,"column":10,"nodeType":"35","messageId":"36","endLine":6,"endColumn":18},{"ruleId":"33","severity":1,"message":"40","line":8,"column":10,"nodeType":"35","messageId":"36","endLine":8,"endColumn":15},{"ruleId":"41","severity":1,"message":"42","line":10,"column":13,"nodeType":"43","endLine":20,"endColumn":4},{"ruleId":"33","severity":1,"message":"44","line":34,"column":9,"nodeType":"35","messageId":"36","endLine":34,"endColumn":25},{"ruleId":"45","severity":1,"message":"46","line":84,"column":1,"nodeType":"47","messageId":"48","endLine":86,"endColumn":2},{"ruleId":"45","severity":1,"message":"46","line":87,"column":1,"nodeType":"47","messageId":"48","endLine":89,"endColumn":2},{"ruleId":"45","severity":1,"message":"46","line":90,"column":1,"nodeType":"47","messageId":"48","endLine":97,"endColumn":2},{"ruleId":"45","severity":1,"message":"46","line":98,"column":1,"nodeType":"47","messageId":"48","endLine":100,"endColumn":2},{"ruleId":"45","severity":1,"message":"46","line":101,"column":1,"nodeType":"47","messageId":"48","endLine":103,"endColumn":2},{"ruleId":"33","severity":1,"message":"39","line":31,"column":13,"nodeType":"35","messageId":"36","endLine":31,"endColumn":21},{"ruleId":"33","severity":1,"message":"49","line":31,"column":23,"nodeType":"35","messageId":"36","endLine":31,"endColumn":28},"no-unused-vars","'socket' is assigned a value but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Col' is defined but never used.","'products' is assigned a value but never used.","'total' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'mapReduceHandler' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'users' is assigned a value but never used."]