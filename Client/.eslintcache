[{"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Layout.js":"1","C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\Pages\\Home\\Create.js":"2","C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\SSO\\SignUp.js":"3","C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\Utils\\Page.js":"4","C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\Utils\\PageBody.js":"5","C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\NavBar\\MobileBar.js":"6"},{"size":6143,"mtime":1618385987474,"results":"7","hashOfConfig":"8"},{"size":7813,"mtime":1618672273445,"results":"9","hashOfConfig":"8"},{"size":3820,"mtime":1618672273455,"results":"10","hashOfConfig":"8"},{"size":1450,"mtime":1617191666200,"results":"11","hashOfConfig":"8"},{"size":1205,"mtime":1617191666200,"results":"12","hashOfConfig":"8"},{"size":2221,"mtime":1618321615854,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1njgvb0",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Layout.js",["29","30","31"],"import React, { useState, useContext } from \"react\";\r\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\r\nimport { useIntl } from \"react-intl\";\r\nimport SideBar from \"./Components/NavBar/SideBar\";\r\nimport MobileBar from \"./Components/NavBar/MobileBar\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport Icon from \"./Assets/Images/ReBuyLogoTrans.png\";\r\nimport Home from \"./Components/Pages/Home/Home\";\r\nimport Map from \"./Components/Pages/Map/Map\";\r\nimport Favorites from \"./Components/Pages/Favorites/Favorites\";\r\nimport MainSettings from \"./Components/Pages/Settings/MainSettings\";\r\nimport UserSettings from \"./Components/Pages/Settings/ProfileSettings\";\r\nimport ProductInsert from \"./Components/Pages/Home/Create\";\r\nimport ProductUpload from \"./Components/Pages/Home/Update\";\r\nimport { AuthContext } from \"./Components/SSO/Auth\";\r\nimport Registration from \"./Components/SSO/Registration\";\r\n\r\nexport default function Layout({ setLocale, setActive, isActive }) {\r\n  const intl = useIntl();\r\n  const [rtl, setRtl] = useState(true);\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const [image, setImage] = useState(false);\r\n  const [toggled, setToggled] = useState(true);\r\n  const [title, setTitle] = useState(\"ReBuy\");\r\n  const [notificationData, setnotificationData] = useState();\r\n  const count = notificationData ? notificationData.length : 0;\r\n  const [notificationCount, setNotificationCount] = useState(count);\r\n  const { currentUser } = useContext(AuthContext);\r\n\r\n  const handleCollapsedChange = (checked) => {\r\n    setCollapsed(checked);\r\n  };\r\n\r\n  const handleRtlChange = (checked) => {\r\n    setRtl(checked);\r\n    setLocale(checked ? \"he\" : \"en\");\r\n  };\r\n  const handleImageChange = (checked) => {\r\n    setImage(checked);\r\n  };\r\n\r\n  const handleToggleSidebar = () => {\r\n    setToggled(!toggled);\r\n  };\r\n  return (\r\n    <LoadingOverlay\r\n      active={isActive}\r\n      fadeSpeed={10000}\r\n      spinner={\r\n        <div\r\n          style={{\r\n            animation: \"spin 1.5s linear infinite\",\r\n          }}\r\n        >\r\n          <img src={Icon} alt={\"Icon\"} style={{ width: \"30%\" }} />\r\n        </div>\r\n      }\r\n      styles={{\r\n        wrapper: {},\r\n        overlay: (base) => ({\r\n          ...base,\r\n          backgroundColor: \"#f1f7fb\",\r\n          opacity: \"0.9\",\r\n          height: \"100%\",\r\n          position: \"fixed\",\r\n        }),\r\n      }}\r\n    >\r\n      {isActive || currentUser ? (\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <div\r\n              className={`app ${rtl ? \"rtl\" : \"\"} ${toggled ? \"toggled\" : \"\"}`}\r\n            >\r\n              <div className=\"main-container\">\r\n                <div className=\"sideBar\">\r\n                  <SideBar\r\n                    image={image}\r\n                    collapsed={collapsed}\r\n                    rtl={rtl}\r\n                    toggled={toggled}\r\n                    handleToggleSidebar={handleToggleSidebar}\r\n                    handleCollapsedChange={handleCollapsedChange}\r\n                    handleRtlChange={handleRtlChange}\r\n                    handleImageChange={handleImageChange}\r\n                    notificationCount={notificationCount}\r\n                    setNotificationCount={setNotificationCount}\r\n                    setLoading={setActive}\r\n                    loading={isActive}\r\n                  />\r\n                </div>\r\n                <MobileBar\r\n                  handleToggleSidebar={handleToggleSidebar}\r\n                  notificationCount={notificationCount}\r\n                  setNotificationCount={setNotificationCount}\r\n                />\r\n                <div className={`mainPage ${toggled ? \"toggled\" : \"\"}`}>\r\n                  <Route exact path=\"/\">\r\n                    <Home\r\n                      title={intl.formatMessage({ id: \"Home\" })}\r\n                      setTitle={setTitle}\r\n                      setActive={setActive}\r\n                    />\r\n                  </Route>\r\n                  <Route exact path=\"/Map\">\r\n                    <Map\r\n                      title={intl.formatMessage({ id: \"Map\" })}\r\n                      setTitle={setTitle}\r\n                      setActive={setActive}\r\n                    />\r\n                  </Route>\r\n                  <Route exact path=\"/Upload\">\r\n                    <ProductInsert\r\n                      title={intl.formatMessage({ id: \"Upload\" })}\r\n                      setTitle={setTitle}\r\n                      setActive={setActive}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/Update/:id\">\r\n                    <ProductUpload\r\n                      title={intl.formatMessage({ id: \"Update\" })}\r\n                      setTitle={setTitle}\r\n                      setActive={setActive}\r\n                    />\r\n                  </Route>\r\n                  <Route exact path=\"/Favorites\">\r\n                    <Favorites\r\n                      title={intl.formatMessage({ id: \"Favorites\" })}\r\n                      setTitle={setTitle}\r\n                      setActive={setActive}\r\n                    />\r\n                  </Route>\r\n                  <Route exact path=\"/settings/userSettings\">\r\n                    <UserSettings\r\n                      title={intl.formatMessage({ id: \"profile\" })}\r\n                      setTitle={setTitle}\r\n                    />\r\n                  </Route>\r\n                  <Route exact path=\"/settings/mainSettings\">\r\n                    <MainSettings\r\n                      title={intl.formatMessage({ id: \"settings\" })}\r\n                      setTitle={setTitle}\r\n                    />\r\n                  </Route>\r\n                  {/* </>\r\n                )} */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      ) : (\r\n        <div className={`app ${rtl ? \"rtl\" : \"\"} ${toggled ? \"toggled\" : \"\"}`}>\r\n          <div className=\"main-container\">\r\n            <div className={`mainPage ${toggled ? \"toggled\" : \"\"}`}>\r\n              <Registration />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {setActive(false)}\r\n    </LoadingOverlay>\r\n  );\r\n}\r\n",["32","33"],"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\Pages\\Home\\Create.js",["34"],"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\SSO\\SignUp.js",["35","36"],"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\Utils\\Page.js",["37"],"C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\Utils\\PageBody.js",["38","39","40"],"import React from \"react\";\r\nimport { IoLogoBuffer, IoAdd } from \"react-icons/io5\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function PageBody({ color, boldPar, par, pic, to, button }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        textAlign: \"center\",\r\n        margin: \"2rem\",\r\n        height: \"90%\",\r\n        borderRadius: \"50px\",\r\n        backgroundColor: color,\r\n        color: \"gray\",\r\n      }}\r\n    >\r\n      <img src={pic} style={{ marginTop: \"40px\", height: \"50px\" }} />\r\n      <p style={{ margin: \"2rem\" }}>\r\n        <b style={{ display: \"block\" }}>{boldPar}</b> {par}\r\n      </p>\r\n      <Link to={to}>\r\n        <Button\r\n          style={{\r\n            textAlign: \"center\",\r\n            margin: \"1rem\",\r\n            padding: \"1rem\",\r\n            height: \"90%\",\r\n            textOverflow: \"ellipsis\",\r\n            whiteSpace: \"nowrap\",\r\n            width: \"auto\",\r\n            background: \"#343798\",\r\n            color: \"white\",\r\n            borderRadius: \"66px 66px 66px 66px\",\r\n            boxShadow: \"0px 0px 10px 0px\",\r\n          }}\r\n        >\r\n          <h5>{button}</h5>\r\n        </Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\hta19\\Documents\\GitHub\\ReBuySite\\client\\src\\Components\\NavBar\\MobileBar.js",["41"],{"ruleId":"42","severity":1,"message":"43","line":2,"column":40,"nodeType":"44","messageId":"45","endLine":2,"endColumn":44},{"ruleId":"42","severity":1,"message":"46","line":24,"column":10,"nodeType":"44","messageId":"45","endLine":24,"endColumn":15},{"ruleId":"42","severity":1,"message":"47","line":25,"column":28,"nodeType":"44","messageId":"45","endLine":25,"endColumn":47},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"42","severity":1,"message":"52","line":172,"column":7,"nodeType":"44","messageId":"45","endLine":172,"endColumn":13},{"ruleId":"42","severity":1,"message":"53","line":9,"column":10,"nodeType":"44","messageId":"45","endLine":9,"endColumn":17},{"ruleId":"42","severity":1,"message":"54","line":9,"column":19,"nodeType":"44","messageId":"45","endLine":9,"endColumn":29},{"ruleId":"42","severity":1,"message":"55","line":2,"column":10,"nodeType":"44","messageId":"45","endLine":2,"endColumn":17},{"ruleId":"42","severity":1,"message":"56","line":2,"column":10,"nodeType":"44","messageId":"45","endLine":2,"endColumn":22},{"ruleId":"42","severity":1,"message":"57","line":2,"column":24,"nodeType":"44","messageId":"45","endLine":2,"endColumn":29},{"ruleId":"58","severity":1,"message":"59","line":18,"column":7,"nodeType":"60","endLine":18,"endColumn":70},{"ruleId":"42","severity":1,"message":"61","line":9,"column":12,"nodeType":"44","messageId":"45","endLine":9,"endColumn":30},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'title' is assigned a value but never used.","'setnotificationData' is assigned a value but never used.","no-native-reassign",["62"],"no-negated-in-lhs",["63"],"'images' is assigned a value but never used.","'signdUp' is assigned a value but never used.","'setsigndUp' is assigned a value but never used.","'useIntl' is defined but never used.","'IoLogoBuffer' is defined but never used.","'IoAdd' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'notificationHandle' is defined but never used.","no-global-assign","no-unsafe-negation"]